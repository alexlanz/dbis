@prefix map: <#> .
@prefix db: <> .
@prefix vocab: <vocab/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix d2r: <http://sites.wiwiss.fu-berlin.de/suhl/bizer/d2r-server/config.rdf#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix jdbc: <http://d2rq.org/terms/jdbc/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix mo: <http://purl.org/ontology/mo/> .

<> a d2r:Server;
	d2r:baseURI <http://dbis-nowplaying.uibk.ac.at/>;
	d2r:port 80;
	d2r:limitPerClassMap 1000;
	d2r:limitPerPropertyBridge false;
	d2r:sparqlTimeout 60;
  	d2r:pageTimeout 5;
	rdfs:label "#nowplaying";
	.

map:database a d2rq:Database;
	d2rq:jdbcDriver "com.mysql.jdbc.Driver";
	d2rq:jdbcDSN "jdbc:mysql://localhost/";
	d2rq:username "";
	d2rq:password "";
	jdbc:autoReconnect "true";
	jdbc:zeroDateTimeBehavior "convertToNull";
	.

# Table artists
map:artists a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "artists/@@trackAndArtist.artistHash@@";
	d2rq:class mo:MusicArtist;
	d2rq:classDefinitionLabel "artists";
	.
map:artists__label a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:artists;
	d2rq:property rdfs:label;
	d2rq:column "trackAndArtist.artistName";
	.
map:artists_name a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:artists;
	d2rq:property foaf:name;
	d2rq:propertyDefinitionLabel "artists name";
	d2rq:column "trackAndArtist.artistName";
	.
map:artists_musicbrainz_artists__ref a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:artists;
	d2rq:property mo:musicbrainz;
	d2rq:propertyDefinitionLabel "artists musicbrainz";
	d2rq:uriPattern "http://musicbrainz.org/artist/@@musicbrainzArtists.mbID@@";
	d2rq:join "trackAndArtist.id => musicbrainzArtists.trackID";
	.

# Table tracks
map:tracks a d2rq:ClassMap;
        d2rq:dataStorage map:database;
        d2rq:uriPattern "tracks/@@trackAndArtist.id@@";
        d2rq:class mo:Track;
        d2rq:classDefinitionLabel "tracks";
        .
map:tracks__label a d2rq:PropertyBridge;
        d2rq:belongsToClassMap map:tracks;
        d2rq:property rdfs:label;
        d2rq:column "trackAndArtist.trackTitle";
        .
map:tracks_title a d2rq:PropertyBridge;
        d2rq:belongsToClassMap map:tracks;
        d2rq:property dc:title;
        d2rq:propertyDefinitionLabel "tracks title";
        d2rq:column "trackAndArtist.trackTitle";
        .
map:tracks_artist__ref a d2rq:PropertyBridge;
        d2rq:belongsToClassMap map:tracks;
        d2rq:property foaf:maker;
        d2rq:uriPattern "artists/@@trackAndArtist.artistHash@@";
        .
map:tracks_musicbrainz_tracks__ref a d2rq:PropertyBridge;
        d2rq:belongsToClassMap map:tracks;
        d2rq:property mo:musicbrainz;
        d2rq:propertyDefinitionLabel "tracks musicbrainz";
        d2rq:uriPattern "http://musicbrainz.org/track/@@musicbrainzTracks.mbID@@";
        d2rq:join "trackAndArtist.id => musicbrainzTracks.trackID";
        .

# Table listening_events
map:listening_events a d2rq:ClassMap;
	d2rq:dataStorage map:database;
	d2rq:uriPattern "listening_events/@@listeningEvents.tweetID@@";
	d2rq:class sioc:Post;
	d2rq:classDefinitionLabel "listening_events";
	.
map:listening_events__label a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:listening_events;
	d2rq:property rdfs:label;
	d2rq:pattern "@@trackAndArtist.artistName@@ - @@trackAndArtist.trackTitle@@";
	d2rq:join "listeningEvents.track => trackAndArtist.id";
	.
map:listening_events_created_at a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:listening_events;
	d2rq:property dcterms:created;
	d2rq:propertyDefinitionLabel "listening_events created_at";
	d2rq:column "listeningEvents.created_at";
	d2rq:datatype xsd:dateTime;
	.
map:listening_events_service a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:listening_events;
	d2rq:property dc:publisher;
	d2rq:propertyDefinitionLabel "listening_events source";
	d2rq:column "listeningEvents.source";
	.
map:listening_events_track__ref a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:listening_events;
	d2rq:property mo:track;
	d2rq:refersToClassMap map:tracks;
	d2rq:join "listeningEvents.track => trackAndArtist.id";
	.
map:listening_events_user__ref a d2rq:PropertyBridge;
	d2rq:belongsToClassMap map:listening_events;
	d2rq:property sioc:has_creator;
	d2rq:propertyDefinitionLabel "listening_events user";
	d2rq:column "listeningEvents.user";
	.
